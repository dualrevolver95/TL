/* Generated By:JJTree&JavaCC: Do not edit this line. comp.java */
import java.io.*;
import java.util.*;

class comp/*@bgen(jjtree)*/implements compTreeConstants, compConstants {/*@bgen(jjtree)*/
  protected static JJTcompState jjtree = new JJTcompState();
        public static Hashtable TS = new Hashtable();
        public static Stack<SimpleNode> Cxt = new Stack<SimpleNode>();

        public static void main( String[] args )throws ParseException, Exception
        {
                try
                {

                        String aux;
                STC    aux2;

                        System.out.println("Inicia el parser\u005cn");

                comp analizador = new comp( System.in ) ;
                        SimpleNode n = analizador.Programa();

                        System.out.println("\u005cn\u005cnARBOL DE SINTAXIS\u005cn\u005cn");

                        n.dump(" ");

                        Enumeration t = TS.keys();

                        System.out.println(t);

                        System.out.println("\u005cn\u005cnTABLA DE SIMBOLOS\u005cn\u005cn");

                        while ( t.hasMoreElements() == true ) {

                                aux = (String)t.nextElement();
                                aux2 = (STC)TS.get(aux);
                                System.out.println(aux);

                                if ( aux2.type != null )
                        System.out.println(" Tipo: " + aux2.type);
                        if ( aux2.value != null )
                        System.out.println(" Valor: " + aux2.value);
                if ( aux2.numLineas != 0 )
                        System.out.println(" Numero de linea: " + aux2.numLineas);
                if ( aux2.ambito != null )
                        System.out.println(" Ambito: " + aux2.getAmbitoString());
                        }

                        System.out.println("\u005cn\u005ctAnalizador ha terminado.");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\u005ctCompil\u00f3 con errores.");
                }
        }

  static final public SimpleNode Programa() throws ParseException {
 /*@bgen(jjtree) Programa */
  ASTPrograma jjtn000 = new ASTPrograma(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
             Cxt.push(jjtn000);
        Definiciones();
        jj_consume_token(0);
                 Cxt.pop(); {if (true) return jjtn000;}
      } catch (ParseException e) {
                int[] follow = {EOF};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Bloque() throws ParseException {
 /*@bgen(jjtree) Bloque */
  ASTBloque jjtn000 = new ASTBloque(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(3)) {
        VariablesGlobales();
      } else if (jj_2_2(2)) {
        Principal();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Definiciones() throws ParseException {
 /*@bgen(jjtree) BloqueDeDefiniciones */
  ASTBloqueDeDefiniciones jjtn000 = new ASTBloqueDeDefiniciones(JJTBLOQUEDEDEFINICIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        if (jj_2_5(3)) {
          if (jj_2_3(3)) {
            Funcion();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
            case DEC:
            case CHR:
              VariablesGlobales();
              break;
            default:
              jj_la1[0] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case DEC:
          case CHR:
            if (jj_2_4(3)) {
              VariablesGlobales();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INT:
                Principal();
                break;
              default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                int[] follow = {EOF};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Cuerpo de funciones
  static final public void Funcion() throws ParseException {
 /*@bgen(jjtree) Funcion */
        ASTFuncion jjtn000 = new ASTFuncion(JJTFUNCION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);TokenAsignaciones.SetTables();
        Token tk;
        Token tk1;
        Token tk2;
        Token tk3;
        Token tk4;
        Token tk5;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
          tk = jj_consume_token(VOID);
                                 jjtn000.value=tk.image; TS.put(tk.image, new STC("Void", tk.image, tk.beginLine, Cxt.peek()));
          break;
        case INT:
          tk = jj_consume_token(INT);
                             jjtn000.value=tk.image; TS.put(tk.image, new STC("Int", tk.image, tk.beginLine, Cxt.peek()));
          break;
        case DEC:
          tk = jj_consume_token(DEC);
                               jjtn000.value=tk.image; TS.put(tk.image, new STC("Dec", tk.image, tk.beginLine, Cxt.peek()));
          break;
        case CHR:
          tk = jj_consume_token(CHR);
                              jjtn000.value=tk.image; TS.put(tk.image, new STC("Char", tk.image, tk.beginLine, Cxt.peek()));
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tk1 = jj_consume_token(IDENTIFIER);
                                   jjtn000.value=tk1.image; TS.put(tk1.image, new STC("IDENTIFICADOR", tk1.image, tk1.beginLine, Cxt.peek()));
        tk2 = jj_consume_token(LPAREN);
                                jjtn000.value=tk2.image; TS.put(tk2.image, new STC("PARENTESIS APERTURA", tk2.image, tk2.beginLine, Cxt.peek()));
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case DEC:
          case CHR:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            Int();
            break;
          case DEC:
            Dec();
            break;
          case CHR:
            Chr();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Identifier();
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_2;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
              Int();
              break;
            case DEC:
              Dec();
              break;
            case CHR:
              Chr();
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              Identifier();
              break;
            default:
              jj_la1[9] = jj_gen;
              ;
            }
          }
        }
        tk3 = jj_consume_token(RPAREN);
                                jjtn000.value=tk3.image; TS.put(tk3.image, new STC("PARENTESIS CIERRA", tk3.image, tk3.beginLine, Cxt.peek()));
        tk4 = jj_consume_token(LBRACE);
                                jjtn000.value=tk4.image; TS.put(tk4.image, new STC("LLAVE CIERRE", tk4.image, tk4.beginLine, Cxt.peek()));
   Cxt.push(jjtn000);
        Sentencias();
                                              Cxt.pop();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          SentenciaReturn();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        tk5 = jj_consume_token(RBRACE);
                                jjtn000.value=tk4.image; TS.put(tk4.image, new STC("LLAVE APERTURA", tk4.image, tk4.beginLine, Cxt.peek()));
        Definiciones();
      } catch (ParseException e) {
                int[] follow = {VOID,INT,DEC,CHR,EOF};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariablesGlobales() throws ParseException {
 /*@bgen(jjtree) BloqueVariablesGlobales */
        ASTBloqueVariablesGlobales jjtn000 = new ASTBloqueVariablesGlobales(JJTBLOQUEVARIABLESGLOBALES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int td;
        Token var;
        Token tk;
    try {
      try {
        TiposDatos();
                                td = token.kind;
        var = jj_consume_token(IDENTIFIER);
                                            jjtn000.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));
                                TokenAsignaciones.InsertarSimbolo(var, td);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASIGNACION:
          VariablesAsignacion(var);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          var = jj_consume_token(IDENTIFIER);
                                                     jjtn000.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));
                                        TokenAsignaciones.InsertarSimbolo(var, td);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASIGNACION:
            VariablesAsignacion(var);
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
        }
        tk = jj_consume_token(SEMICOLON);
                                                   jjtn000.value=tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine, Cxt.peek()));
        Bloque();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,SEMICOLON,IDENTIFIER};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Principal() throws ParseException {
 /*@bgen(jjtree) Main */
        ASTMain jjtn000 = new ASTMain(JJTMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);TokenAsignaciones.SetTables();
        Token tk;
        Token tk1;
        Token tk2;
        Token tk3;
        Token tk4;
        Token tk5;
    try {
      try {
        Int();
        jj_consume_token(MAIN);
        Lparen();
        Void();
        Rparen();
        Lbrace();
                                                             Cxt.push(jjtn000);
        Sentencias();
                                                                                               Cxt.pop();
        SentenciaReturn();
        Rbrace();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,EOF};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariablesLocales() throws ParseException {
 /*@bgen(jjtree) VariablesLocales */
        ASTVariablesLocales jjtn000 = new ASTVariablesLocales(JJTVARIABLESLOCALES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int td;
        Token var;
        Token tk;
    try {
      try {
        TiposDatos();
                                td = token.kind;
        var = jj_consume_token(IDENTIFIER);
                                            jjtn000.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));
                                TokenAsignaciones.InsertarSimbolo(var, td);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASIGNACION:
          VariablesAsignacion(var);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          var = jj_consume_token(IDENTIFIER);
                                                    jjtn000.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));
                                        TokenAsignaciones.InsertarSimbolo(var, td);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASIGNACION:
            VariablesAsignacion(var);
            break;
          default:
            jj_la1[16] = jj_gen;
            ;
          }
        }
        tk = jj_consume_token(SEMICOLON);
                                                   jjtn000.value=tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine, Cxt.peek()));
        VS();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,IF,FOR,DO,SWITCH,SEMICOLON,IDENTIFIER};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariablesAsignacion(Token v1) throws ParseException {
 /*@bgen(jjtree) Asignacion */
        ASTAsignacion jjtn000 = new ASTAsignacion(JJTASIGNACION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v2;
        Token v3;
        Token tk;
        String res;
        boolean imp = false;
    try {
      try {
        tk = jj_consume_token(ASIGNACION);
                                   jjtn000.value=tk.image; TS.put(tk.image, new STC("IGUAL", tk.image, tk.beginLine, Cxt.peek()));
        TiposAsignaciones();
                        v2 = token;
                        res = TokenAsignaciones.checkAsing(v1, v2);

                        if(res != " ")
                        {
                                System.out.println(res);
                                imp = true;
                        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case MINUS:
          case MULTIPLY:
          case DIVIDE:
          case ORB:
          case ANDB:
          case XORB:
          case NUMBER:
          case IDENTIFIER:
          case DECIMAL:
          case CARAC:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_5;
          }
          OpAritmetico();
          TiposAsignaciones();
                        v3 = token;
                        res = TokenAsignaciones.checkAsing(v1, v3);

                        if(res != " " && !imp)
                        {
                                System.out.println(res);
                        }
        }
      } catch (ParseException e) {
                int[] follow = {COMMA,SEMICOLON,INT,DEC,CHR};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VS() throws ParseException {
    if (jj_2_6(3)) {
      VariablesLocales();
    } else {
      Sentencias();
    }
  }

  static final public void Sentencias() throws ParseException {
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case SWITCH:
        case DO:
        case WHILE:
        case INT:
        case DEC:
        case CHR:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case DEC:
        case CHR:
          VariablesLocales();
          break;
        case IF:
          SentenciaIf();
          break;
        case FOR:
          SentenciaFor();
          break;
        case DO:
        case WHILE:
          SentenciaDo();
          break;
        default:
          jj_la1[19] = jj_gen;
          if (jj_2_7(2)) {
            SentenciaAsignacion();
            Semicolon();
                                                               TokenAsignaciones.segunda = 0;
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SWITCH:
              SentenciaSwitch();
              break;
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException e) {
                int[] follow = {RBRACE,RETURN,INT,DEC,CHR,SEMICOLON,RPAREN};
                error_skipto(follow,e);
    }
  }

//Sentencia IF
  static final public void SentenciaIf() throws ParseException {
 /*@bgen(jjtree) SentenciaIf */
        ASTSentenciaIf jjtn000 = new ASTSentenciaIf(JJTSENTENCIAIF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      try {
        tk = jj_consume_token(IF);
                            jjtn000.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine));
        Lparen();
        A();
        Rparen();
        Lbrace();
                                                Cxt.push(jjtn000);
        Sentencias();
                                                                                  Cxt.pop();
        Rbrace();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          Sino();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                int[] follow = {RBRACE,INT,DEC,CHR,FOR,DO,SWITCH,IDENTIFIER,SEMICOLON,RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Sino() throws ParseException {
 /*@bgen(jjtree) Sino */
        ASTSino jjtn000 = new ASTSino(JJTSINO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      try {
        tk = jj_consume_token(ELSE);
                              jjtn000.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine));
        Lbrace();
                          Cxt.push(jjtn000);
        Sentencias();
                                                            Cxt.pop();
        Rbrace();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,FOR,DO,SWITCH,IDENTIFIER};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void A() throws ParseException {
 /*@bgen(jjtree) A */
  ASTA jjtn000 = new ASTA(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        Comparaciones();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
          case AND:
          case NUMBER:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
          case AND:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AND:
              jj_consume_token(AND);
              break;
            case OR:
              jj_consume_token(OR);
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          Comparaciones();
        }
      } catch (ParseException e) {
                int[] follow = {RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Fin sentencia if
  static final public void Comparaciones() throws ParseException {
 /*@bgen(jjtree) Comparaciones */
  ASTComparaciones jjtn000 = new ASTComparaciones(JJTCOMPARACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
                  Cxt.push(jjtn000);
        Valor();
        Operadores();
        Valor();
                                                                  Cxt.pop();
      } catch (ParseException e) {
                int[] follow = {SEMICOLON,RPAREN,AND,OR};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Valor() throws ParseException {
 /*@bgen(jjtree) Valor */
  ASTValor jjtn000 = new ASTValor(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        if (jj_2_8(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Identifier();
            break;
          case NUMBER:
            Number();
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
          case IDENTIFIER:
            Expresion();
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                int[] follow = {EQ,LE,GE,NE,GR,MN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expresion() throws ParseException {
 /*@bgen(jjtree) Expresion */
  ASTExpresion jjtn000 = new ASTExpresion(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          Number();
          break;
        case IDENTIFIER:
          Identifier();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Identifier();
            break;
          case NUMBER:
            Number();
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          OpAritmetico();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Identifier();
            break;
          case NUMBER:
            Number();
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Operadores() throws ParseException {
 /*@bgen(jjtree) Operadores */
        ASTOperadores jjtn000 = new ASTOperadores(JJTOPERADORES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        tk = jj_consume_token(EQ);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case LE:
        tk = jj_consume_token(LE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case GE:
        tk = jj_consume_token(GE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case NE:
        tk = jj_consume_token(NE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case GR:
        tk = jj_consume_token(GR);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case MN:
        tk = jj_consume_token(MN);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  static final public int OpAritmetico() throws ParseException {
 /*@bgen(jjtree) OpAritmetico */
        ASTOpAritmetico jjtn000 = new ASTOpAritmetico(JJTOPARITMETICO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          tk = jj_consume_token(PLUS);
                                  jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                                  {if (true) return 1;}
          break;
        case MINUS:
          tk = jj_consume_token(MINUS);
                                   jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                                   {if (true) return 1;}
          break;
        case MULTIPLY:
          tk = jj_consume_token(MULTIPLY);
                                      jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                                      {if (true) return 1;}
          break;
        case DIVIDE:
          tk = jj_consume_token(DIVIDE);
                                    jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                                    {if (true) return 1;}
          break;
        case ANDB:
          tk = jj_consume_token(ANDB);
                                  jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR DE BITS", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                               {if (true) return 1;}
          break;
        case ORB:
          tk = jj_consume_token(ORB);
                                 jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR DE BITS", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                              {if (true) return 1;}
          break;
        case XORB:
          tk = jj_consume_token(XORB);
                                  jjtn000.value=tk.image; TS.put(tk.image, new STC("OPERADOR DE BITS", tk.image, tk.beginLine, Cxt.peek()));
                                                                                                                                               {if (true) return 1;}
          break;
        default:
          jj_la1[32] = jj_gen;
                    {if (true) return 0;}
                 {if (true) return 0;}
        }
      } catch (ParseException e) {
                int[] follow = {IDENTIFIER,NUMBER,IDENTIFIER,NUMBER,DECIMAL,CADENA,CARAC};
                error_skipto(follow,e);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//SI SE PONE EN TABLA DE SIMBOLOS IMRPIME TIPO DE DATO, NO INCLUIR
  static final public void TiposDatos() throws ParseException {
 /*@bgen(jjtree) TipoDato */
        ASTTipoDato jjtn000 = new ASTTipoDato(JJTTIPODATO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        tk = jj_consume_token(INT);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.value=tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case DEC:
        tk = jj_consume_token(DEC);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.value=tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      case CHR:
        tk = jj_consume_token(CHR);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.value=tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//Sentencia FOR
  static final public void SentenciaFor() throws ParseException {
 /*@bgen(jjtree) SentenciaFor */
        ASTSentenciaFor jjtn000 = new ASTSentenciaFor(JJTSENTENCIAFOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      try {
        tk = jj_consume_token(FOR);
                             jjtn000.value=tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine));
        Lparen();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case DEC:
        case CHR:
          DeclaracionUnaVariable();
          break;
        case IDENTIFIER:
          SentenciaAsignacion();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Semicolon();
        Comparaciones();
        Semicolon();
        SentenciaAsignacion();
        Rparen();
        Lbrace();
                                                                                                                                                            Cxt.push(jjtn000);
        Sentencias();
                                                                                                                                                                                              Cxt.pop();
        Rbrace();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,IF,DO,SWITCH,IDENTIFIER,RBRACE,SEMICOLON,RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DeclaracionUnaVariable() throws ParseException {
 /*@bgen(jjtree) DeclaracionUnaVariable */
        ASTDeclaracionUnaVariable jjtn000 = new ASTDeclaracionUnaVariable(JJTDECLARACIONUNAVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int td;
        Token var;
    try {
      try {
        TiposDatos();
                        td = token.kind;
        var = jj_consume_token(IDENTIFIER);
                                     jjtn000.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));
                        TokenAsignaciones.InsertarSimbolo(var, td);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASIGNACION:
          VariablesAsignacion(var);
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                int[] follow = {SEMICOLON};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Sentencia DO
  static final public void SentenciaDo() throws ParseException {
 /*@bgen(jjtree) SentenciaDo */
        ASTSentenciaDo jjtn000 = new ASTSentenciaDo(JJTSENTENCIADO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
        Token tk1;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
          tk = jj_consume_token(DO);
                            jjtn000.value=tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek()));
          Lbrace();
                           Cxt.push(jjtn000);
          Sentencias();
                                                            Cxt.pop();
          Rbrace();
          tk1 = jj_consume_token(WHILE);
                                jjtn000.value=tk.image; TS.put(tk1.image, new STC("PALABRA RESERVADA", tk1.image, tk1.beginLine, Cxt.peek()));
          Lparen();
          Comparaciones();
          Rparen();
          Semicolon();
          break;
        case WHILE:
          SentenciaWhile();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,FOR,IF,SWITCH,IDENTIFIER,RBRACE,SEMICOLON,RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentenciaWhile() throws ParseException {
 /*@bgen(jjtree) SentenciaWhile */
        ASTSentenciaWhile jjtn000 = new ASTSentenciaWhile(JJTSENTENCIAWHILE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      try {
        tk = jj_consume_token(WHILE);
                               jjtn000.value=tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek()));
        Lparen();
        Comparaciones();
        Rparen();
        Lbrace();
                           Cxt.push(jjtn000);
        Sentencias();
                                                             Cxt.pop();
        Rbrace();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,FOR,IF,SWITCH,IDENTIFIER,RBRACE,SEMICOLON,RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Sentencia ASIGNACION
  static final public void SentenciaAsignacion() throws ParseException {
 /*@bgen(jjtree) SentenciaAsignacion */
        ASTSentenciaAsignacion jjtn000 = new ASTSentenciaAsignacion(JJTSENTENCIAASIGNACION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v1;
        Token v2;
        Token v3;
        int aux;
        String res;
        boolean imp = false;
    try {
      try {
        v1 = jj_consume_token(IDENTIFIER);
                              jjtn000.value=v1.image; TS.put(v1.image, new STC("IDENTIFICADOR", v1.image, v1.beginLine, Cxt.peek()));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASIGNACION:
          jj_consume_token(ASIGNACION);
          TiposAsignaciones();
            v2 = token;
                res = TokenAsignaciones.checkAsing(v1, v2);

                if(res != " ")
                {
                        System.out.println(res);
                        imp = true;
                }
          label_8:
          while (true) {
            if (jj_2_10(2)) {
              ;
            } else {
              break label_8;
            }
            OpAritmetico();
            TiposAsignaciones();
            v3 = token;
                res = TokenAsignaciones.checkAsing(v1, v3);

                if(res != " " && !imp)
                {
                        System.out.println(res);
                }
          }
          break;
        case INCR:
        case DECR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            jj_consume_token(INCR);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                res = TokenAsignaciones.checkVariable(v1);

                if(res != " ")
                        System.out.println(res);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                int[] follow = {SEMICOLON,RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TiposAsignaciones() throws ParseException {
 /*@bgen(jjtree) TipoAsignar */
        ASTTipoAsignar jjtn000 = new ASTTipoAsignar(JJTTIPOASIGNAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          tk = jj_consume_token(IDENTIFIER);
                                      jjtn000.value=tk.image; TS.put(tk.image, new STC("IDENTIFICADOR", tk.image, tk.beginLine, Cxt.peek()));
          break;
        case NUMBER:
          tk = jj_consume_token(NUMBER);
                                   jjtn000.value=tk.image; TS.put(tk.image, new STC("NUMERO", tk.image, tk.beginLine, Cxt.peek()));
          break;
        case DECIMAL:
          tk = jj_consume_token(DECIMAL);
                                   jjtn000.value=tk.image; TS.put(tk.image, new STC("DECIMAL", tk.image, tk.beginLine, Cxt.peek()));
          break;
        case CARAC:
          tk = jj_consume_token(CARAC);
                                 jjtn000.value=tk.image; TS.put(tk.image, new STC("CARACTER", tk.image, tk.beginLine, Cxt.peek()));
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                int[] follow = {PLUS,MINUS,MULTIPLY,DIVIDE,ANDB,ORB,XORB,COMMA,SEMICOLON,INT,DEC,CHR};
                error_skipto(follow,e);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Sentencia WRITE
  static final public void SentenciaWrite() throws ParseException {
 /*@bgen(jjtree) SentenciaWrite */
  ASTSentenciaWrite jjtn000 = new ASTSentenciaWrite(JJTSENTENCIAWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
      jj_consume_token(LPAREN);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
        case CADENA:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          Expresion();
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS:
              ;
              break;
            default:
              jj_la1[41] = jj_gen;
              break label_10;
            }
            jj_consume_token(PLUS);
            jj_consume_token(CADENA);
          }
          break;
        case CADENA:
          jj_consume_token(CADENA);
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS:
              ;
              break;
            default:
              jj_la1[42] = jj_gen;
              break label_11;
            }
            jj_consume_token(PLUS);
            Expresion();
          }
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Sentencia READ
  static final public void SentenciaRead() throws ParseException {
 /*@bgen(jjtree) SentenciaRead */
  ASTSentenciaRead jjtn000 = new ASTSentenciaRead(JJTSENTENCIAREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(READ);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentenciaReturn() throws ParseException {
 /*@bgen(jjtree) Return */
        ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
        Token tk1;
    try {
      try {
        tk = jj_consume_token(RETURN);
                                jjtn000.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek()));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          tk1 = jj_consume_token(NUMBER);
                                  jjtn000.value = tk1.image; TS.put(tk1.image, new STC("NUMERO", tk1.image, tk1.beginLine, Cxt.peek()));
          break;
        case IDENTIFIER:
          tk1 = jj_consume_token(IDENTIFIER);
                                      jjtn000.value = tk1.image; TS.put(tk1.image, new STC("IDENTIFICADOR", tk1.image, tk1.beginLine, Cxt.peek()));
          break;
        case DECIMAL:
          tk1 = jj_consume_token(DECIMAL);
                                   jjtn000.value = tk1.image; TS.put(tk1.image, new STC("DECIMAL", tk1.image, tk1.beginLine, Cxt.peek()));
          break;
        case CADENA:
          tk1 = jj_consume_token(CADENA);
                                  jjtn000.value = tk1.image; TS.put(tk1.image, new STC("CADENA DE TEXTO", tk1.image, tk1.beginLine, Cxt.peek()));
          break;
        case CARAC:
          tk1 = jj_consume_token(CARAC);
                                 jjtn000.value = tk1.image; TS.put(tk1.image, new STC("CARACTER", tk1.image, tk1.beginLine, Cxt.peek()));
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                int[] follow = {RBRACE};
                error_skipto(follow,e);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentenciaSwitch() throws ParseException {
 /*@bgen(jjtree) SentenciaSwitch */
        ASTSentenciaSwitch jjtn000 = new ASTSentenciaSwitch(JJTSENTENCIASWITCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
        Token tk1;
        Token tk2;
        Token tk3;
        Token tk4;
    try {
      try {
        tk = jj_consume_token(SWITCH);
                                jjtn000.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek()));
        Lparen();
        Identifier();
        Rparen();
        Lbrace();
        label_12:
        while (true) {
          tk1 = jj_consume_token(CASE);
                                jjtn000.value = tk1.image; TS.put(tk1.image, new STC("PALABRA RESERVADA", tk1.image, tk1.beginLine, Cxt.peek()));
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Identifier();
            break;
          case CADENA:
            Cadena();
            break;
          case CARAC:
            CARAC();
            break;
          case NUMBER:
            Number();
            break;
          case DECIMAL:
            Decimal();
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          DoublePoint();
          label_13:
          while (true) {
            SentenciaAsignacion();
            Semicolon();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              ;
              break;
            default:
              jj_la1[46] = jj_gen;
              break label_13;
            }
          }
          Break();
          Semicolon();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASE:
            ;
            break;
          default:
            jj_la1[47] = jj_gen;
            break label_12;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFAUL:
          tk3 = jj_consume_token(DEFAUL);
                                 jjtn000.value = tk3.image; TS.put(tk3.image, new STC("PALABRA RESERVADA", tk3.image, tk3.beginLine, Cxt.peek()));
          DoublePoint();
          SentenciaAsignacion();
          Semicolon();
          Break();
          Semicolon();
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        Rbrace();
      } catch (ParseException e) {
                int[] follow = {INT,DEC,CHR,IF,DO,FOR,IDENTIFIER,RBRACE,SEMICOLON,RPAREN};
                error_skipto(follow,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Producciones Simbolos Terminales
  static final public void Void() throws ParseException {
 /*@bgen(jjtree) Void */
        ASTVoid jjtn000 = new ASTVoid(JJTVOID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(VOID);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Int() throws ParseException {
 /*@bgen(jjtree) Int */
        ASTInt jjtn000 = new ASTInt(JJTINT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(INT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Dec() throws ParseException {
 /*@bgen(jjtree) Dec */
        ASTDec jjtn000 = new ASTDec(JJTDEC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(DEC);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Chr() throws ParseException {
 /*@bgen(jjtree) Chr */
        ASTChr jjtn000 = new ASTChr(JJTCHR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(CHR);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(IDENTIFIER);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.value = tk.image; TS.put(tk.image, new STC("IDENTIFICADOR", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(NUMBER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value = tk.image; TS.put(tk.image, new STC("NUMERO", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Decimal() throws ParseException {
 /*@bgen(jjtree) Decimal */
        ASTDecimal jjtn000 = new ASTDecimal(JJTDECIMAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(DECIMAL);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.value = tk.image; TS.put(tk.image, new STC("DECIMAL", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CARAC() throws ParseException {
 /*@bgen(jjtree) CARAC */
        ASTCARAC jjtn000 = new ASTCARAC(JJTCARAC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(CARAC);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.value = tk.image; TS.put(tk.image, new STC("CARACTER", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Cadena() throws ParseException {
 /*@bgen(jjtree) Cadena */
        ASTCadena jjtn000 = new ASTCadena(JJTCADENA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(CADENA);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value = tk.image; TS.put(tk.image, new STC("CADENA", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Break() throws ParseException {
 /*@bgen(jjtree) Break */
        ASTBreak jjtn000 = new ASTBreak(JJTBREAK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(BREAK);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.value = tk.image; TS.put(tk.image, new STC("CADENA", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Comma() throws ParseException {
 /*@bgen(jjtree) Comma */
        ASTComma jjtn000 = new ASTComma(JJTCOMMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(COMMA);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.value = tk.image; TS.put(tk.image, new STC("COMA", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Rparen() throws ParseException {
 /*@bgen(jjtree) Rparen */
        ASTRparen jjtn000 = new ASTRparen(JJTRPAREN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(RPAREN);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value = tk.image; TS.put(tk.image, new STC("PARENTESIS CIERRE", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Lparen() throws ParseException {
 /*@bgen(jjtree) Lparen */
        ASTLparen jjtn000 = new ASTLparen(JJTLPAREN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(LPAREN);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value = tk.image; TS.put(tk.image, new STC("PARENTESIS APERTURA", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Lbrace() throws ParseException {
 /*@bgen(jjtree) Lbrace */
        ASTLbrace jjtn000 = new ASTLbrace(JJTLBRACE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(LBRACE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value = tk.image; TS.put(tk.image, new STC("LLAVE APERTURA", tk.image, tk.beginLine, Cxt.peek()));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Rbrace() throws ParseException {
 /*@bgen(jjtree) Rbrace */
        ASTRbrace jjtn000 = new ASTRbrace(JJTRBRACE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(RBRACE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.value = tk.image; TS.put(tk.image, new STC("LLAVE CIERRE", tk.image, tk.beginLine));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Semicolon() throws ParseException {
 /*@bgen(jjtree) Semicolon */
        ASTSemicolon jjtn000 = new ASTSemicolon(JJTSEMICOLON);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(SEMICOLON);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.value = tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DoublePoint() throws ParseException {
 /*@bgen(jjtree) DoublePoint */
        ASTDoublePoint jjtn000 = new ASTDoublePoint(JJTDOUBLEPOINT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(DOUBLEPOINT);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.value = tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//OPERADORES DE BITS
  static final public int OpBits() throws ParseException {
 /*@bgen(jjtree) OpBits */
  ASTOpBits jjtn000 = new ASTOpBits(JJTOPBITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDB:
        jj_consume_token(ANDB);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   {if (true) return 1;}
        break;
      case ORB:
        jj_consume_token(ORB);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  {if (true) return 1;}
        break;
      case XORB:
        jj_consume_token(XORB);
                   {if (true) return 1;}
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return 0;}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static void error_skipto(int kind[],ParseException e) throws ParseException {
                                                /*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {System.out.println(e.toString());  // print the error message
  int size = kind.length;
  Token t;
  boolean flag = true;
  do {
  t = getNextToken();
    for(int i = 0;i<size;i++){
        if(kind[i] == t.kind){
                flag = false;
        }
    }
    if(t.kind == EOF)
        flag = false;

  } while (flag);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(CARAC)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(ASIGNACION)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(CHR)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(CHR)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(ASIGNACION)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(XORB)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(ORB)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(ANDB)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(MAIN)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x20000000,0x0,0x0,0x200000,0x2,0x20000000,0x2,0x2,0x20000000,0x2,0x3c,0x63400,0x61400,0x2000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x2,0x60000,0xc0,0xc2,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x4000,0x10000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1c000,0x4000,0x1c000,0x1c000,0x1c000,0x1c000,0x40000,0x0,0x1c000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2e1a00,0x5c000,0x1c000,0x0,0x0,0x60500,0x500,0x500,0x60000,0x60000,0x60000,0x60000,0x60000,0x60000,0xb7,0x1a00,0x1c000,0x5c000,0x0,0x0,0x0,0x0,0x2e0000,0x160000,0x0,0x0,0x160000,0x3e0000,0x3e0000,0x40000,0x0,0x0,0x1a00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
