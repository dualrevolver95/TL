options {
  IGNORE_CASE = false;
  MULTI = true;
}

PARSER_BEGIN(comp)
import java.io.*;
import java.util.*;

class comp 
{

	public static Hashtable TS = new Hashtable();
	public static Stack<SimpleNode> Cxt = new Stack<SimpleNode>();

	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{	

			String aux;
    		STC    aux2;	

			System.out.println("Inicia el parser\n");

     		comp analizador = new comp( System.in ) ;
			SimpleNode n = analizador.Programa();

			System.out.println("\n\nARBOL DE SINTAXIS\n\n");

			n.dump(" ");

			Enumeration t = TS.keys();

			System.out.println(t);

			System.out.println("\n\nTABLA DE SIMBOLOS\n\n");

			while ( t.hasMoreElements() == true ) {

				aux = (String)t.nextElement();
				aux2 = (STC)TS.get(aux);
				System.out.println(aux);

				if ( aux2.type != null )
            		System.out.println(" Tipo: " + aux2.type);
          		if ( aux2.value != null )
            		System.out.println(" Valor: " + aux2.value);
            	if ( aux2.numLineas != 0 )
            		System.out.println(" Numero de linea: " + aux2.numLineas);
            	if ( aux2.ambito != null )
            		System.out.println(" Ambito: " + aux2.getAmbitoString());
			}

			System.out.println("\n\tAnalizador ha terminado.");			
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\tCompiló con errores.");
		}
	}
}
PARSER_END(comp)

TOKEN:
{
	  <ASIGNACION : "="> //1
	| <PLUS : "+" >  //2
	| <MINUS:"-"> //3
	| <MULTIPLY:"*">  //4
	| <DIVIDE:"/"> //5
	| <INCR: "++" > //6
	| <DECR: "--" > //7
}

TOKEN:
{
	  <VOID: "void"> //8
	| <MAIN: "Main" | "main"> //9
	| <IF: "if" > //10
	| <ELSE:"else" > //11
	| <FOR:"for" > //12
	| <SWITCH:"switch" > //13
	| <CASE:"case" > //14
	| <BREAK:"break" > //15
	| <DEFAUL:"default" > //16
	| <DO:"do" > //17
	| <WHILE:"while" > //18
	| <WRITE:"printf" > //19
	| <READ:"scanf" > //20
	| <RETURN: "return"> //21
}

TOKEN:
{
	  <LPAREN: "(" > //22
	| <RPAREN: ")" > //23
	| <LBRACE: "{" > //24
	| <RBRACE: "}" > //25
	| <LBRACKET: "[" > //26
	| <RBRACKET: "]" > //27
	| <SEMICOLON: ";" > //28
	| <COMMA: "," > //29
	| <DOT: "." > //30
	| <DOUBLECOMMA: "\""> //31
}

TOKEN:
{
	  <EQ: "==" > //32
	| <LE: "<=" > //33
	| <MN: "<" > //34
	| <LSHIFTB: "<<"> //35
	| <GE: ">=" > //36
	| <GR: ">" > //37
	| <RSHIFTB: ">>"> //38
	| <NE: "!=" > //39
	| <OR: "||" > //40
	| <ORB: "|"> //41
	| <AND: "&&"> //42
	| <ANDB: "&"> //43
	| <XORB: "^"> //44
	| <NOTB: "~"> //45
}

TOKEN:
{
	  <INT:"int"> //46
	| <DEC: "float"> //47
	| <CHR: "char"> //48
	| <NUMBER : (["0"-"9"])+>  //49
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>  //50
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //51
	| <CADENA : <DOUBLECOMMA>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";","."])*<DOUBLECOMMA>> //52
	| <CARAC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >//53
	| <DOUBLEPOINT : ":"> //54
}

SKIP : 
{ 
	 	" "
	|	"\n"
	|	"\r"
	|	"\r\n"
	|	"\t"
	|	< "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >  //Comentario de linea
	|	< "/*" > : IN_COMMENT    //Cuando encuentra /* pasa al estado IN_COMMENT
}

//Acciones cuando está en el estado IN_COMMENT
<IN_COMMENT> SKIP:
{
		<"*/"> : DEFAULT
	|	<~[] >
}


SimpleNode Programa() :
{}
{
	try{
	    {Cxt.push(jjtThis);}
		Definiciones()<EOF>
		{Cxt.pop(); return jjtThis;}
	}catch(ParseException e){
		int[] follow = {EOF}; 
		error_skipto(follow,e);
	}
}


void Bloque() :
{}
{	
	LOOKAHEAD(3) VariablesGlobales() | LOOKAHEAD(2) Principal()
	
}

void Definiciones() #BloqueDeDefiniciones : 
{}
{
	try{
		LOOKAHEAD(3) 
		( LOOKAHEAD(3) Funcion() | VariablesGlobales() ) 
		| 
		( LOOKAHEAD(3) VariablesGlobales() | Principal() )
	}catch(ParseException e){
		int[] follow = {EOF}; 
		error_skipto(follow,e);
	}
}

//Cuerpo de funciones
void Funcion() :
{
	TokenAsignaciones.SetTables();
	Token tk;
	Token tk1;
	Token tk2;
	Token tk3;
	Token tk4;
	Token tk5;
}
{
	try{
		( tk = <VOID>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("Void", tk.image, tk.beginLine, Cxt.peek()));}
		| tk= <INT> {jjtThis.value=tk.image; TS.put(tk.image, new STC("Int", tk.image, tk.beginLine, Cxt.peek()));}
		| tk = <DEC>  {jjtThis.value=tk.image; TS.put(tk.image, new STC("Dec", tk.image, tk.beginLine, Cxt.peek()));}
		| tk= <CHR>  {jjtThis.value=tk.image; TS.put(tk.image, new STC("Char", tk.image, tk.beginLine, Cxt.peek()));})

		tk1= <IDENTIFIER> {jjtThis.value=tk1.image; TS.put(tk1.image, new STC("IDENTIFICADOR", tk1.image, tk1.beginLine, Cxt.peek()));}

		tk2 = <LPAREN> {jjtThis.value=tk2.image; TS.put(tk2.image, new STC("PARENTESIS APERTURA", tk2.image, tk2.beginLine, Cxt.peek()));}

		((Int()|Dec()|Chr())(Identifier())?(<COMMA>(Int()|Dec()|Chr())(Identifier())?)*)*

		tk3 = <RPAREN> {jjtThis.value=tk3.image; TS.put(tk3.image, new STC("PARENTESIS CIERRA", tk3.image, tk3.beginLine, Cxt.peek()));}

		tk4 = <LBRACE> {jjtThis.value=tk4.image; TS.put(tk4.image, new STC("LLAVE CIERRE", tk4.image, tk4.beginLine, Cxt.peek()));}

  {Cxt.push(jjtThis);} 		Sentencias() {Cxt.pop();} (SentenciaReturn())?

 		tk5 = <RBRACE> {jjtThis.value=tk4.image; TS.put(tk4.image, new STC("LLAVE APERTURA", tk4.image, tk4.beginLine, Cxt.peek()));}

 		Definiciones()
	}catch(ParseException e){
		int[] follow = {VOID,INT,DEC,CHR,EOF}; 
		error_skipto(follow,e);
	}
}

void VariablesGlobales() #BloqueVariablesGlobales:
{
	int td;
	Token var;	
	Token tk;
}
{
	try{
		(
			(TiposDatos())
			{
				td = token.kind;
			}
			var = <IDENTIFIER> {jjtThis.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));}
			{		
				TokenAsignaciones.InsertarSimbolo(var, td);
			} 
			[VariablesAsignacion(var)]
			(
				<COMMA>
				var = <IDENTIFIER>  {jjtThis.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));}
				{		
					TokenAsignaciones.InsertarSimbolo(var, td);
				} 
				[VariablesAsignacion(var)]
			)*	
				tk = <SEMICOLON>  {jjtThis.value=tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine, Cxt.peek()));}
		)
		(Bloque())
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,SEMICOLON,IDENTIFIER}; 
		error_skipto(follow,e);
	}
}

void Principal() #Main:
{
	TokenAsignaciones.SetTables();	
	Token tk;
	Token tk1;
	Token tk2;
	Token tk3;
	Token tk4;
	Token tk5;
}
{
	try{
		Int()
			<MAIN>Lparen()Void()Rparen()Lbrace(){Cxt.push(jjtThis);} Sentencias() {Cxt.pop();} SentenciaReturn()Rbrace()
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,EOF}; 
		error_skipto(follow,e);
	}
}

void VariablesLocales() :
{
	int td;
	Token var;	
	Token tk;
}
{
	try{
		(
			(TiposDatos())
			{
				td = token.kind;
			}
			var = <IDENTIFIER> {jjtThis.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));}
			{		
				TokenAsignaciones.InsertarSimbolo(var, td);
			} 
			[VariablesAsignacion(var)]
			(
				<COMMA>
				var = <IDENTIFIER> {jjtThis.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));}
				{		
					TokenAsignaciones.InsertarSimbolo(var, td);
				} 
				[VariablesAsignacion(var)]
			)*	
				tk = <SEMICOLON>  {jjtThis.value=tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine, Cxt.peek()));}
		)
		(VS())
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,IF,FOR,DO,SWITCH,SEMICOLON,IDENTIFIER}; 
		error_skipto(follow,e);
	}
}

void VariablesAsignacion(Token v1) #Asignacion:
{
	Token v2;
	Token v3;
	Token tk;
	String res;	
	boolean imp = false;
}
{
	try{
		tk = <ASIGNACION> {jjtThis.value=tk.image; TS.put(tk.image, new STC("IGUAL", tk.image, tk.beginLine, Cxt.peek()));}
		(TiposAsignaciones())
		  {  
			v2 = token;
			res = TokenAsignaciones.checkAsing(v1, v2);
			
			if(res != " ")
			{
				System.out.println(res);
				imp = true;
			}
		  }
		  (OpAritmetico()
		  TiposAsignaciones()
		  {  
			v3 = token;
			res = TokenAsignaciones.checkAsing(v1, v3);
			
			if(res != " " && !imp)
			{
				System.out.println(res);
			}
		  })*
	}catch(ParseException e){
		int[] follow = {COMMA,SEMICOLON,INT,DEC,CHR}; 
		error_skipto(follow,e);
	}
}

void VS() #void:
{}
{
	LOOKAHEAD(3)VariablesLocales() | Sentencias()
}

void Sentencias() #void:
{}
{
	try{
		(	
		  VariablesLocales()	
	    | SentenciaIf() 	
		| SentenciaFor()
		| SentenciaDo()	
		| LOOKAHEAD(2)SentenciaAsignacion()Semicolon(){TokenAsignaciones.segunda = 0;}
		| SentenciaSwitch()
		)*
	}catch(ParseException e){
		int[] follow = {RBRACE,RETURN,INT,DEC,CHR,SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}
}

//Sentencia IF
void SentenciaIf():
{
	Token tk;
}
{
	try{
		tk = <IF> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine)); }
		Lparen() A() Rparen() Lbrace() {Cxt.push(jjtThis);} Sentencias() {Cxt.pop();} Rbrace() (Sino())?
	}catch(ParseException e){
		int[] follow = {RBRACE,INT,DEC,CHR,FOR,DO,SWITCH,IDENTIFIER,SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}
}


void Sino():
{
	Token tk;
}
{
	try{
		tk = <ELSE> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine)); }
		Lbrace() {Cxt.push(jjtThis);} Sentencias() {Cxt.pop();} Rbrace()
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,FOR,DO,SWITCH,IDENTIFIER}; 
		error_skipto(follow,e);
	}
}

void A():
{}
{	try{
		Comparaciones() ([(<AND>|<OR>)] Comparaciones())*
	}catch(ParseException e){
		int[] follow = {RPAREN}; 
		error_skipto(follow,e);
	}
}
//Fin sentencia if

void Comparaciones():
{}
{
	try{
		 {Cxt.push(jjtThis);} Valor()Operadores()Valor() {Cxt.pop();}
	}catch(ParseException e){
		int[] follow = {SEMICOLON,RPAREN,AND,OR}; 
		error_skipto(follow,e);
	}
}

void Valor():
{}
{
	try{
		LOOKAHEAD(2) (Identifier() | Number()) | Expresion()
	}catch(ParseException e){
		int[] follow = {EQ,LE,GE,NE,GR,MN}; 
		error_skipto(follow,e);
	}
}
void Expresion():
{}
{
    LOOKAHEAD(2)(Number() | Identifier())
	|(Identifier()|Number()) OpAritmetico() (Identifier()|Number()) 
}

void Operadores():
{
	Token tk;
}
{
	    tk = <EQ> { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));}
	  | tk = <LE> { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));}
	  | tk = <GE> { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));}
	  | tk = <NE> { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));}
	  | tk = <GR> { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));}
	  | tk = <MN> { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR LOGICO", tk.image, tk.beginLine, Cxt.peek()));}
}
int OpAritmetico():
{
	Token tk;
}
{
	try{
		  (tk = <PLUS>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| (tk = <MINUS>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| (tk = <MULTIPLY>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| (tk = <DIVIDE>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR ARITMETICO", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| (tk = <ANDB>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR DE BITS", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| (tk = <ORB>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR DE BITS", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| (tk = <XORB>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("OPERADOR DE BITS", tk.image, tk.beginLine, Cxt.peek()));} {return 1;})
		| ({return 0;})
		
		{return 0;}
	}catch(ParseException e){
		int[] follow = {IDENTIFIER,NUMBER,IDENTIFIER,NUMBER,DECIMAL,CADENA,CARAC}; 
		error_skipto(follow,e);
	}
}

//SI SE PONE EN TABLA DE SIMBOLOS IMRPIME TIPO DE DATO, NO INCLUIR
void TiposDatos() #TipoDato:
{
	Token tk;
}
{
	 tk = <INT> { jjtThis.value=tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));}
	|tk = <DEC> { jjtThis.value=tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));}
	|tk = <CHR> { jjtThis.value=tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek()));}
}


//Sentencia FOR
void SentenciaFor():
{
	Token tk;
}
{
	try{
		tk = <FOR> { jjtThis.value=tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine));}
		Lparen() (DeclaracionUnaVariable()|SentenciaAsignacion()) Semicolon() Comparaciones() Semicolon() SentenciaAsignacion() Rparen() Lbrace()  {Cxt.push(jjtThis);} Sentencias() {Cxt.pop();} Rbrace()
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,IF,DO,SWITCH,IDENTIFIER,RBRACE,SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}

}

void DeclaracionUnaVariable():
{
	int td;
	Token var;	
}
{	
	try{
		(TiposDatos())
		{
			td = token.kind;
		}
		var = <IDENTIFIER> { jjtThis.value=var.image; TS.put(var.image, new STC("IDENTIFICADOR", var.image, var.beginLine, Cxt.peek()));}
		{		
			TokenAsignaciones.InsertarSimbolo(var, td);
		} 
		[VariablesAsignacion(var)]	
	}catch(ParseException e){
		int[] follow = {SEMICOLON}; 
		error_skipto(follow,e);
	}	
}

//Sentencia DO
void SentenciaDo():
{
	Token tk;
	Token tk1;
}
{
	try{
		tk = <DO> { jjtThis.value=tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek()));}
		Lbrace()  {Cxt.push(jjtThis);} Sentencias(){Cxt.pop();} Rbrace()
		tk1 = <WHILE> { jjtThis.value=tk.image; TS.put(tk1.image, new STC("PALABRA RESERVADA", tk1.image, tk1.beginLine, Cxt.peek()));}
		Lparen() Comparaciones() Rparen() Semicolon() | SentenciaWhile()
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,FOR,IF,SWITCH,IDENTIFIER,RBRACE,SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}
}
void SentenciaWhile():
{
	Token tk;
}
{
	try{
		tk = <WHILE> { jjtThis.value=tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek()));}
		Lparen() Comparaciones() Rparen()
		Lbrace()  {Cxt.push(jjtThis);} Sentencias() {Cxt.pop();} Rbrace()
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,FOR,IF,SWITCH,IDENTIFIER,RBRACE,SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}
}

//Sentencia ASIGNACION
void SentenciaAsignacion():
{
	Token v1;
	Token v2;
	Token v3;
	int aux;
	String res;
	boolean imp = false;
}
{
	try{
	  v1 = <IDENTIFIER> { jjtThis.value=v1.image; TS.put(v1.image, new STC("IDENTIFICADOR", v1.image, v1.beginLine, Cxt.peek()));}
	  (<ASIGNACION>
	  (TiposAsignaciones())
	  {  
	    v2 = token;
		res = TokenAsignaciones.checkAsing(v1, v2);
		
		if(res != " ")
		{
			System.out.println(res);
			imp = true;
		}
	  }
	  (LOOKAHEAD(2)OpAritmetico()
	  TiposAsignaciones()
	  {  
	    v3 = token;
		res = TokenAsignaciones.checkAsing(v1, v3);
		
		if(res != " " && !imp)
		{
			System.out.println(res);
		}
	  })*  
	  |
	  (<INCR>|<DECR>)
	  {  
		res = TokenAsignaciones.checkVariable(v1);
		
		if(res != " ")	
			System.out.println(res);	
		}) 		
	//SentenciaAsignacion ya trae <SEMICOLON> en el metodo Sentencias()
	}catch(ParseException e){
		int[] follow = {SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}
}

void TiposAsignaciones() #TipoAsignar:
{
	Token tk;
}
{
	try{
		  tk = <IDENTIFIER> { jjtThis.value=tk.image; TS.put(tk.image, new STC("IDENTIFICADOR", tk.image, tk.beginLine, Cxt.peek()));}
		| tk = <NUMBER>  { jjtThis.value=tk.image; TS.put(tk.image, new STC("NUMERO", tk.image, tk.beginLine, Cxt.peek()));}
		| tk = <DECIMAL> { jjtThis.value=tk.image; TS.put(tk.image, new STC("DECIMAL", tk.image, tk.beginLine, Cxt.peek()));}
		| tk = <CARAC> { jjtThis.value=tk.image; TS.put(tk.image, new STC("CARACTER", tk.image, tk.beginLine, Cxt.peek()));}
	}catch(ParseException e){
		int[] follow = {PLUS,MINUS,MULTIPLY,DIVIDE,ANDB,ORB,XORB,COMMA,SEMICOLON,INT,DEC,CHR}; 
		error_skipto(follow,e);
	}
}

//Sentencia WRITE
void SentenciaWrite():
{}
{
	<WRITE> <LPAREN> (Expresion()(<PLUS><CADENA>)*|<CADENA>(<PLUS>Expresion())*)* <RPAREN> <SEMICOLON> 
}

//Sentencia READ
void SentenciaRead():
{}
{
	<READ><LPAREN><RPAREN>
}

void SentenciaReturn() #Return:
{
	Token tk;
	Token tk1;
}
{
	try{
		tk = <RETURN> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek())); }
		(tk1 = <NUMBER> { jjtThis.value = tk1.image; TS.put(tk1.image, new STC("NUMERO", tk1.image, tk1.beginLine, Cxt.peek())); }
		|tk1 = <IDENTIFIER> { jjtThis.value = tk1.image; TS.put(tk1.image, new STC("IDENTIFICADOR", tk1.image, tk1.beginLine, Cxt.peek())); }
		|tk1 = <DECIMAL> { jjtThis.value = tk1.image; TS.put(tk1.image, new STC("DECIMAL", tk1.image, tk1.beginLine, Cxt.peek())); }
		|tk1 = <CADENA> { jjtThis.value = tk1.image; TS.put(tk1.image, new STC("CADENA DE TEXTO", tk1.image, tk1.beginLine, Cxt.peek())); }
		|tk1 = <CARAC> { jjtThis.value = tk1.image; TS.put(tk1.image, new STC("CARACTER", tk1.image, tk1.beginLine, Cxt.peek())); }
		)<SEMICOLON>
	}catch(ParseException e){
		int[] follow = {RBRACE}; 
		error_skipto(follow,e);
	}
}

void SentenciaSwitch():
{
	Token tk;
	Token tk1;
	Token tk2;
	Token tk3;
	Token tk4;
}
{
	try{
		tk = <SWITCH> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PALABRA RESERVADA", tk.image, tk.beginLine, Cxt.peek())); }
		Lparen() Identifier() Rparen() 
		Lbrace()
		(tk1 = <CASE> { jjtThis.value = tk1.image; TS.put(tk1.image, new STC("PALABRA RESERVADA", tk1.image, tk1.beginLine, Cxt.peek())); }
		(Identifier()|Cadena()|CARAC()|Number()|Decimal())
		DoublePoint()
		(SentenciaAsignacion()Semicolon())+ 
		Break()
		Semicolon())+
		[tk3 = <DEFAUL>{ jjtThis.value = tk3.image; TS.put(tk3.image, new STC("PALABRA RESERVADA", tk3.image, tk3.beginLine, Cxt.peek())); }
		DoublePoint() (SentenciaAsignacion() Semicolon() ) Break() Semicolon()]
		Rbrace()
	}catch(ParseException e){
		int[] follow = {INT,DEC,CHR,IF,DO,FOR,IDENTIFIER,RBRACE,SEMICOLON,RPAREN}; 
		error_skipto(follow,e);
	}

}


//Producciones Simbolos Terminales

void Void():
{
	Token tk;
}
{
	tk = <VOID> { jjtThis.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek())); }
}

void Int():
{
	Token tk; 
}
{
	tk = <INT> { jjtThis.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek())); }
}

void Dec():
{
	Token tk; 
}
{
	tk = <DEC> { jjtThis.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek())); }
}

void Chr():
{
	Token tk; 
}
{
	tk = <CHR> { jjtThis.value = tk.image; TS.put(tk.image, new STC("TIPO DE DATO", tk.image, tk.beginLine, Cxt.peek())); }
}

void Identifier():
{
	Token tk; 
}
{
	tk = <IDENTIFIER> { jjtThis.value = tk.image; TS.put(tk.image, new STC("IDENTIFICADOR", tk.image, tk.beginLine, Cxt.peek())); }
}

void Number():
{
	Token tk; 
}
{
	tk = <NUMBER> { jjtThis.value = tk.image; TS.put(tk.image, new STC("NUMERO", tk.image, tk.beginLine, Cxt.peek())); }
}

void Decimal():
{
	Token tk; 
}
{
	tk = <DECIMAL> { jjtThis.value = tk.image; TS.put(tk.image, new STC("DECIMAL", tk.image, tk.beginLine, Cxt.peek())); }
}

void CARAC():
{
	Token tk; 
}
{
	tk = <CARAC> { jjtThis.value = tk.image; TS.put(tk.image, new STC("CARACTER", tk.image, tk.beginLine, Cxt.peek())); }
}

void Cadena():
{
	Token tk; 
}
{
	tk = <CADENA> { jjtThis.value = tk.image; TS.put(tk.image, new STC("CADENA", tk.image, tk.beginLine, Cxt.peek())); }
}

void Break():
{
	Token tk;
}
{
	tk = <BREAK> { jjtThis.value = tk.image; TS.put(tk.image, new STC("CADENA", tk.image, tk.beginLine, Cxt.peek())); }
}

void Comma():
{
	Token tk; 
}
{
	tk = <COMMA> { jjtThis.value = tk.image; TS.put(tk.image, new STC("COMA", tk.image, tk.beginLine, Cxt.peek())); }
}

void Rparen():
{
	Token tk; 
}
{
	tk = <RPAREN> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PARENTESIS CIERRE", tk.image, tk.beginLine, Cxt.peek())); }
}

void Lparen():
{
	Token tk; 
}
{
	tk = <LPAREN> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PARENTESIS APERTURA", tk.image, tk.beginLine, Cxt.peek())); }
}

void Lbrace():
{
	Token tk; 
}
{
	tk = <LBRACE> { jjtThis.value = tk.image; TS.put(tk.image, new STC("LLAVE APERTURA", tk.image, tk.beginLine, Cxt.peek())); }
}

void Rbrace():
{
	Token tk; 
}
{
	tk = <RBRACE> { jjtThis.value = tk.image; TS.put(tk.image, new STC("LLAVE CIERRE", tk.image, tk.beginLine)); }
}

void Semicolon():
{
	Token tk;
}
{
	tk = <SEMICOLON> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine)); }
}

void DoublePoint():
{
	Token tk;
}
{
	tk = <DOUBLEPOINT> { jjtThis.value = tk.image; TS.put(tk.image, new STC("PUNTO Y COMA", tk.image, tk.beginLine)); }
}



//OPERADORES DE BITS
int OpBits():
{}
{
	  (<ANDB> {return 1;})
	| (<ORB> {return 1;})
	| (<XORB> {return 1;})
	
	{return 0;}
}

JAVACODE
void error_skipto(int kind[],ParseException e) {
  System.out.println(e.toString());  // print the error message
  int size = kind.length;
  Token t;
  boolean flag = true;
  do {
  t = getNextToken();
    for(int i = 0;i<size;i++){
    	if(kind[i] == t.kind){
    		flag = false;
    	}
    }
    if(t.kind == EOF)
    	flag = false;

  } while (flag);
}